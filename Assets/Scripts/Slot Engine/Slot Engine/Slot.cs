//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : Slot.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
#if UNITY_EDITOR
using UnityEditor;
#endif
namespace Slot_Engine.Matrix
{
#if UNITY_EDITOR
    [CustomEditor(typeof(Slot))]
    class SlotEditor : Editor
    {
        Slot myTarget;

        public void OnEnable()
        {
            myTarget = (Slot)target;
        }

        public override void OnInspectorGUI()
        {
            //base.OnInspectorGUI();
            BoomEditorUtilities.DrawUILine(Color.white);
            EditorGUILayout.LabelField("Commands");
            BoomEditorUtilities.DrawUILine(Color.white);
            EditorGUILayout.LabelField("Editable Properties");
            BoomEditorUtilities.DrawUILine(Color.white);
            EditorGUILayout.LabelField("To be Removed");
            base.OnInspectorGUI();

        }
    }
#endif
        public class Slot : MonoBehaviour
        {
        Slot(Symbols Symbol)
        {
            enSymbol = Symbol;
        }

        public Symbols enSymbol = Symbols.None;
        public States enSlotState = States.None;
        
        public Reel reel_parent;
        public int iPositonInReel = 0;
        public float time_in_path = 0.0f;
        public int iEndPositionInReel = 0;

        public Vector3[] v3CurrentTweenpath;
        private float fEndingPos;
        public Rect[] rects;

        public bool movement_enabled = false;
        public float fSpinTime = 0.006f;

        public bool bLoopPositionSet = false;

        /// <summary>
        /// Test Var to set position along path ensure evaluation happening correct
        /// </summary>
        public float percentage_along_path = 0;
        //Unity Default Functions

        //*************

        void StateSwitch(States state)
        {
            //Debug.log("State switched to " + state.ToString());
            if (state == States.BaseGameSpinLoop || state == States.BonusGameSpinLoop)
            {
                enSlotState = state;
            }
            else if (state == States.BaseGameSpinEnd || state == States.BonusGameSpinEnd)
            {
                enSlotState = States.BaseGameSpinEnd;
            }
        }

        public void PlayAnimation()
        {
            //Sprite.frameRate = 24;
            //Sprite.Play();
            //TODO Insert Play Animation Logic
        }

        public void StopAnimation()
        {
            //Sprite.frameRate = 24;
            //Sprite.Stop();
            //TODO Insert Stop Animation Logic
        }

        public void StartSpin(Vector3[] start_end_position)
        {
            Debug.Log(gameObject.name + " starting Spin");
            StopAnimation();
            v3CurrentTweenpath = start_end_position;
            movement_enabled = true;
            //iTween.EaseType easetype_to_start = iTween.EaseType.easeInBack; //TODO refactor to enable settingparent
        }
        private void SetReelPosition(int v)
        {
            iPositonInReel = v;
            //Get new pathing
            Debug.LogWarning("v3 Current Tweenpath is not set");
            //v3CurrentTweenpath = reel_parent.GetTweenPathForSlot(iPositonInReel);
        }

        void DestroyTween()
        {
            Destroy(transform.GetComponent<iTween>());
        }

        void MoveToTop()
        {
            //TODO Check if set end symbol is set and pop from reel end symbol to display if not padding slot
            SetTimeInPathTo(time_in_path - reel_parent.reel_spin_time);
            transform.localPosition = reel_parent.GetLoopPositionFromTime(0);
        }

        private void SetTimeInPathTo(float new_time_in_path)
        {
            time_in_path = new_time_in_path;
        }

        public void SwitchSymbol()
        {
            ResetSpinSymbolTexture();
        }

        public void SwitchSymbol(Symbols Symbol)
        {
            enSymbol = Symbol;
            ResetSpinSymbolTexture();
        }

        private void ResetSpinSymbolTexture()
        {
            
            //TODO Fill in set symbol to static image logic
        }

        Symbols GenerateSymbol()
        {
            //TODO Set Symbol based on supported symbol set passed in
            int iRandom = UnityEngine.Random.Range(1, (int)Symbols.End - 1);
            return (Symbols)iRandom;
        }

        Vector3 GeneratePositionUpdate(float time_on_path) //TODO remove
        {
            return reel_parent.GetLoopPositionFromTime(time_on_path);
        }

        void Update()
        {
            if (movement_enabled)
            {
                //Debug.Log();
                if(time_in_path > reel_parent.reel_spin_time)
                {
                    MoveToTop();
                }
                time_in_path += Time.deltaTime;
                transform.localPosition = GeneratePositionUpdate(time_in_path);
                if (transform.position.y < reel_parent.positions_in_path_v3[reel_parent.positions_in_path_v3.Length - 1].y)
                    MoveToTop();

            }
        }

    }
}