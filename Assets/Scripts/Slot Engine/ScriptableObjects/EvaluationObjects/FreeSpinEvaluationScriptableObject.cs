//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : SlotEngine.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using System;
using System.Collections.Generic;
using UnityEngine;

namespace BoomSports.Prototype.ScriptableObjects
{
    /// <summary>
    /// Creates the scriptable object for Wild Paylines Evaluation information to be stored
    /// </summary>
    [CreateAssetMenu(fileName = "FreeSpinEvaluationObject", menuName = "BoomSportsScriptableObjects/FreeSpinEvaluationScriptableObject", order = 4)]
    public class FreeSpinEvaluationScriptableObject : SlotEvaluationScriptableObject
    {
        public override bool EvaluateNodeForConditionsMet(SuffixTreeNodeInfo nodeInfo, WinningObject[] winningPaylines)
        {
            //For now the only condition is that the symbols do not need to be on a winning payline
            for (int condition = 0; condition < nodeEvaluationConditions.Count; condition++)
            {
                //if(nodeEvaluationConditions[condition].EvaluateCondition(,))
                //{

                //}
            }
            return true;
        }

        public override object EvaluatePaylines(ref EvaluationObjectStruct symbols_configuration)
        {
            //Called at high level and take symbol names and return feature activating
            WinningPayline[] output = new WinningPayline[0];
            //Evaluate payline configuration with Core Evaluation Logic passed thru
            return output;
        }

        public override int? ReturnEvaluationObjectSupportedRootCount()
        {
            return nodesActivatingEvaluationConditions?.Count;
        }

        internal override void ActivateWinningNodesEvents(ConfigurationDisplayZonesStruct[] displayZones)
        {
            throw new NotImplementedException();
        }

        internal bool EvaluateConditionsMet(List<SuffixTreeNodeInfo> nodesToCheck, WinningPayline[] winningPaylines)
        {
            for (int condition = 0; condition < nodeEvaluationConditions.Count; condition++)
            {
                if (!nodeEvaluationConditions[condition].EvaluateCondition(nodesToCheck.ToArray()))
                    return false;
            }
            return true;
        }
    }
}
