//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : SlotEngine.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using BoomSports.Prototype.Managers;
using System;
using System.Collections.Generic;
using UnityEngine;
namespace BoomSports.Prototype.ScriptableObjects
{
    public abstract partial class BaseEvaluationScriptableObject : ScriptableObject
    {
        /// <summary>
        /// have we run the evaluation?
        /// </summary>
        public bool evaluated = false;
        /// <summary>
        /// List of winning objects apart of evaluation
        /// </summary>
        public List<WinningObject> winningObjects;
        public string PrintWinningNodes()
        {
            string output = "";
            for (int i = 0; i < winningObjects.Count; i++)
            {
                output += winningObjects[i].PrintWinningNodes();
            }
            return output;
        }
        /// <summary>
        /// Can return winning paylines - number of overlay symbols - anything
        /// </summary>
        /// <param name="symbols_configuration">The reel symbols configuration shaped to evaluation logic, reelstrips - shapes - ways - etc</param>
        /// <returns>Object needed</returns>
        public abstract object EvaluatePaylines(ref EvaluationObjectStruct symbols_configuration);
        /// <summary>
        /// Returns the evaluation objects number of root nodes supported given a reel configuration. {re-Built in Unity Editor with gaffs to evaluate current matrix object for number of reels and slots defined by display zones and build root nodes for evaluation points to start evaluations from
        /// </summary>
        /// <returns>supported root nodes</returns>
        public abstract int? ReturnEvaluationObjectSupportedRootCount();
        public abstract void ClearWinningObjects();

        internal WinningObject[] ReturnWinningObjects()
        {
            return winningObjects.ToArray();
        }
    }
}

