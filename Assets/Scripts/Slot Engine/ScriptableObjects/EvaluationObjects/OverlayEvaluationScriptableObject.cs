//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : SlotEngine.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using System.Collections.Generic;
using UnityEngine;

namespace Slot_Engine.Matrix.ScriptableObjects
{
    /// <summary>
    /// Creates the scriptable object for Core Prefabs References to be set
    /// </summary>
    [CreateAssetMenu(fileName = "OverlayEvaluationReferenceObject", menuName = "BoomSportsScriptableObjects/OverlayEvaluationReferenceScriptableObject", order = 4)]
    public class OverlayEvaluationScriptableObject : SlotEvaluationScriptableObject
    {
        /// <summary>
        /// The feature to trigger when overlay is activated
        /// </summary>
        public Features featureToTrigger;

        public void InitializeOverlaySymbolsEvaluation()
        {
            nodesActivatingEvaluationConditions = new List<SuffixTreeNodeInfo>();
            nodesActivatingEvaluationConditions.Clear();
        }

        public override object EvaluatePaylines(ref EvaluationObjectStruct symbols_configuration)
        {
            InitializeOverlaySymbolsEvaluation();
            object[] objectReturn = new object[2] { featureToTrigger, symbolTargetNames };
            return objectReturn;
        }

        public override int? ReturnEvaluationObjectSupportedRootCount()
        {
            return nodesActivatingEvaluationConditions.Count;
        }

        public override bool EvaluateNodeForConditionsMet(SuffixTreeNodeInfo nodeInfo, WinningObject[] winningObjects)
        {
            for (int winningObject = 0; winningObject < winningObjects.Length; winningObject++)
            {
                //if any conditions are met to the fullest then the node is a valid node
                //First Test for Overlay - Pass On Winning Paylien Check then Count for payline
                for (int condition = 0; condition < nodeEvaluationConditions.Count; condition++)
                {
                    if (nodeEvaluationConditions[condition].EvaluateCondition(winningObjects[winningObject], nodeInfo))
                    {
                        if(condition == nodeEvaluationConditions.Count - 1)
                            return true;
                    }
                    else
                    {
                        break;
                    }
                }
            }
            return false;
        }
    }
}
