//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : SlotEngine.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using UnityEngine;
using System.Collections.Generic;
using System;
using UnityEngine;

[CreateAssetMenu(fileName = "StateMachineObjects", menuName = "BoomSportsScriptableObjects/StateMachinesScriptableObject", order = 4)]
public class StateMachinesScriptableObject : ScriptableObject
{
    /// <summary>
    /// Current end reelstrip configuration in use
    /// </summary>
    public AnimatorStateMachines state_machines_to_sync;
}
[Serializable]
public struct AnimatorSubStateMachines
{
    [SerializeField]
    public AnimatorSubStateMachine[] sub_state_machines;
}
[Serializable]
public struct AnimatorSubStateMachine
{
    [SerializeField]
    public Animator[] sub_state_animators;
}

[Serializable]
public struct AnimatorStateMachines
{
    /// <summary>
    /// Current end reelstrip configuration in use
    /// </summary>
    [SerializeField]
    public Animator[] state_machines_to_sync;
    [SerializeField]
    public string[] sub_state_machines_keys;
    [SerializeField]
    public AnimatorSubStateMachines sub_state_machines_values;

    internal void AddAnimatorsToList(Animator[] animators)
    {
        AddAnimatorsToListRef(ref state_machines_to_sync, animators);
    }

    private void AddAnimatorsToListRef(ref Animator[] animators_list, Animator[] animators)
    {
        if (animators_list == null)
            animators_list = new Animator[0];
        Animator to_add;
        bool add = false;
        for (int animator = 0; animator < animators.Length; animator++)
        {
            to_add = animators[animator];
            add = false;
            for (int i = 0; i < animators_list.Length; i++)
            {
                if (animators_list[i] == to_add)
                {
                    break;
                }
                if (i == animators_list.Length - 1)
                {
                    add = true;
                }
            }
            if (add)
                animators_list.AddAt<Animator>(animators_list.Length, to_add);
        }
    }

    internal void AddAnimatorsToSubList(string animator_state_machine, ref Animator[] animators)
    {
        int index = -1;
        if (!sub_state_machines_keys.Contains<string>(animator_state_machine, out index))
        {
            sub_state_machines_keys = sub_state_machines_keys.AddAt<string>(index, animator_state_machine);
            AnimatorSubStateMachine subStateMachine = new AnimatorSubStateMachine();
            subStateMachine.sub_state_animators = animators;
            sub_state_machines_values.sub_state_machines = sub_state_machines_values.sub_state_machines.AddTo<AnimatorSubStateMachine>(subStateMachine);
        }
        else
        {
            if (sub_state_machines_values.sub_state_machines.Length > index)
            {
                sub_state_machines_values.sub_state_machines[index].sub_state_animators = animators;
            }
            else
            {
                AnimatorSubStateMachine subStateMachine = new AnimatorSubStateMachine();
                subStateMachine.sub_state_animators = animators;
                sub_state_machines_values.sub_state_machines = sub_state_machines_values.sub_state_machines.AddTo<AnimatorSubStateMachine>(subStateMachine);
            }
        }
        
    }

    internal void ClearValues()
    {
        sub_state_machines_keys = new string[0];
        sub_state_machines_values = new AnimatorSubStateMachines();
        sub_state_machines_values.sub_state_machines = new AnimatorSubStateMachine[0];
    }
}
