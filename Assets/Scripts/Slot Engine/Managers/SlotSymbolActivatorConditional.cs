//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : Reel.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using UnityEngine;
using System;
using BoomSports.Prototype.Managers;
namespace BoomSports.Prototype
{
    /// <summary>
    /// A slot activator that triggered by a symbol on a row. Use-Case - Send 
    /// </summary>
    [Serializable]
    public class SlotSymbolActivatorConditional : BaseSlotActivatorEventConditional
    {
        /// <summary>
        /// The symbol that activates event conditions when present in slot
        /// </summary>
        [SerializeField]
        public int symbolIDThatActivatesCondition;

        //Cash Crossing Specific hard coded
        public int rowThatActivates = 1;
        public int rowThatDeactivates = 5;
        public override bool EvaluateCondition(BaseObjectManager objectToEvaluate)
        {
            Debug.LogWarning("EvaluateCondition(BaseObjectManager objectToEvaluate) not implemented for next slot symbol activator");
            //if (objectToEvaluate.currentPresentingSymbolID == symbolIDThatActivatesCondition)
            //{
            //    //Get next position in strip
            //    int nextPosition = objectToEvaluate.indexOnPath + 1;
            //    if(nextPosition >= rowThatActivates && nextPosition <= rowThatDeactivates)
            //    {
            //        for (int target = 0; target < targetConditionalContainer.targetsForConditionalTrue.Length; target++)
            //        {
            //            Debug.Log($"{objectToEvaluate.gameObject.name} with index on path as {objectToEvaluate.indexOnPath} is activating a condition");
            //            //Animators are 0-5 but start on row 1 - index on path is current index which is same number as index in animator without adding 0-1 etc
            //            targetConditionalContainer.targetsForConditionalTrue[target].ActivateConditionalAtIndex(objectToEvaluate.indexOnPath);
            //        }
            //        return true;
            //    }
            //}
            return false;
        }
        /// <summary>
        /// Evaluates a condition for symbol at index in end sequence. Usually called on spin start - usecase - trigger bridge animator of cash crossing
        /// </summary>
        /// <param name="symbolID"></param>
        /// <param name="indexInEndSequence"></param>
        /// <param name="objectGroupManagerDisplayZones">handles padding and active vs inactive display zones</param>
        /// <returns></returns>
        public override bool EvaluateCondition(SymbolObjectGroupEvaluatorContainer symbolEvaluationContainer)
        {
            Debug.Log($"Evaluating symbolID {symbolEvaluationContainer.symbolID} with index in sequence {symbolEvaluationContainer.indexInEndSequence} is activating a condition");
            if (symbolEvaluationContainer.symbolID == symbolIDThatActivatesCondition)
            {
                if (symbolEvaluationContainer.indexInEndSequence >= rowThatActivates && symbolEvaluationContainer.indexInEndSequence <= rowThatDeactivates)
                {
                    for (int target = 0; target < targetConditionalContainer.targetsForConditionalTrue.Length; target++)
                    {
                        Debug.Log($"symbolEvaluationContainer.symbolID {symbolEvaluationContainer.symbolID} at index in sequence {symbolEvaluationContainer.indexInEndSequence} activated a condition");
                        //Animators are 0-5 but start on row 1 - index on path is current index which is same number as index in animator without adding 0-1 etc
                        //TODO: in the future add support for active vs inactive display zones
                        targetConditionalContainer.targetsForConditionalTrue[target].ActivateConditionalAtIndex(symbolEvaluationContainer.indexInEndSequence - symbolEvaluationContainer.objectGroupManagerDisplayZones.paddingBefore);
                    }
                    return true;
                }
            }
            return false;
        }

        internal override void Initialize()
        {
            for (int target = 0; target < targetConditionalContainer.targetsForConditionalTrue.Length; target++)
            {
                targetConditionalContainer.targetsForConditionalTrue[target].Initialize();
            }
        }

    }
}
