//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Slot Engine
//  @ File Name : SlotEngine.cs
//  @ Date : 5/7/2014
//  @ Author : Evan McCall
//
//
using UnityEngine;
using System.Threading.Tasks;
#if UNITY_EDITOR
using UnityEditor;
using UnityEditorInternal;
#endif
using System;

namespace Slot_Engine.Matrix
{
#if UNITY_EDITOR
    [CustomEditor(typeof(ConfigurationGenerator))]
    class MatrixGeneratorEditor : BoomSportsEditor
    {
        ConfigurationGenerator myTarget;
        SerializedProperty connectedConfigurationObject;

        public void OnEnable()
        {
            myTarget = (ConfigurationGenerator)target;
            connectedConfigurationObject = serializedObject.FindProperty("connectedConfigurationObject");
        }
        public override void OnInspectorGUI()
        {
            serializedObject.Update();
            BoomEditorUtilities.DrawUILine(Color.white);
            GenerateEditorHeader();
            BoomEditorUtilities.DrawUILine(Color.white);
            GenerateEditorBody();
            BoomEditorUtilities.DrawUILine(Color.white);
            base.OnInspectorGUI();
        }

        private void GenerateEditorBody()
        {   
            BoomEditorUtilities.DrawUILine(Color.white);
            EditorGUILayout.LabelField("Modify Spin Information");
            EditorGUI.BeginChangeCheck();
            //EditorGUILayout.PropertyField(spin_parameters);
            if (EditorGUI.EndChangeCheck())
            {
                serializedObject.ApplyModifiedProperties();
                myTarget.UpdateSpinParameters();
            }
            if (GUILayout.Button("Force Spin Parameters Update"))
            {
                myTarget.UpdateSpinParameters();
            }
            BoomEditorUtilities.DrawUILine(Color.white);
        }

        private void GenerateEditorHeader()
        {
            if (myTarget.transform.childCount < 1)
            {
                EditorGUILayout.LabelField("Commands");
                //Display zones, Slot Size, Slot Padding and all the managers need to be initialized
                if (GUILayout.Button("Generate Matrix From Current Configuration"))
                {
                    //Will need to generate managers and all UI tools
                    myTarget.CreateCurrentConfiguration();
                }
            }
            else
            {
                if (connectedConfigurationObject.objectReferenceValue == null && myTarget.transform.GetComponentInChildren<ReelStripConfigurationObject>())
                {
                    EditorGUILayout.LabelField("Commands");
                    if (GUILayout.Button("Connect matrix generator to child matrix"))
                    {
                        myTarget.ConnectMatrixToChild();
                        serializedObject.Update();
                    }
                }
                else if (connectedConfigurationObject.objectReferenceValue == null && !myTarget.transform.GetComponentInChildren<ReelStripConfigurationObject>())
                {
                    EditorGUILayout.LabelField("Child gameobject must have matrix component");
                    if (GUILayout.Button("Generate Matrix From Current Configuration"))
                    {
                        //Will need to generate managers and all UI tools
                        myTarget.CreateCurrentConfiguration();
                    }
                }
                else if (connectedConfigurationObject.objectReferenceValue != null)
                {
                    EditorGUILayout.LabelField("Modifying below will modify Connected Matrix");
                    if(GUILayout.Button("Load Configuration Selected"))
                    {
                        myTarget.LoadConfigurationSelected();
                    }
                }
            }
        }
    }

#endif

    public class ConfigurationGenerator : MonoBehaviour
    {
        //Static Self Reference
        private static ConfigurationGenerator instance;
        public static ConfigurationGenerator _instance
        {
            get
            {
                if (instance == null)
                    instance = GameObject.FindGameObjectWithTag("Slot Engine").GetComponent<ConfigurationGenerator>();
                return instance;
            }
            set
            {
                instance = value;
            }
        }
        //*****************

        public ConfigurationSettingsScriptableObject configurationGeneratorSettings;

        //Engine Options
        /// <summary>
        /// What Game Asset folder is currently loaded - To Be Implemented
        /// </summary>
        public string configurationObjectLoadedName;
        //********
        //Associate the instance that gets updated with Generate Matrix
        public ReelStripConfigurationObject connectedConfigurationObject;
        /// <summary>
        /// Creates a configuration based on current settings
        /// </summary>
        public async void CreateCurrentConfiguration() //Main matrix Create Function
        {
            //Check for a child object. If there is then connect and modify otherwise create a new one
            GenerateConfigurationObject(ref connectedConfigurationObject);
            SetConnectedConfigurationObjectLoadedSettings();
            await DisplayConfigurationSettings(ref configurationGeneratorSettings);
        }

        private void SetConnectedConfigurationObjectLoadedSettings()
        {
            connectedConfigurationObject.configurationSettings = configurationGeneratorSettings;
            configurationObjectLoadedName = configurationGeneratorSettings.configurationName;
        }

        private Task DisplayConfigurationSettings(ref ConfigurationSettingsScriptableObject configurationGeneratorSettings)
        {
            SetConfigurationDisplayZones(configurationGeneratorSettings.displayZones);
            return Task.CompletedTask;
        }

        /// <summary>
        /// Sets the reelstrips info for the matrix
        /// </summary>
        /// <param name="display_zones_per_reel">The display zone breakdown per reel</param>
        /// <returns></returns>
        public Task SetConfigurationDisplayZones(ConfigurationStripStructDisplayZones[] display_zones_per_reel)
        {
            //Build reelstrip info 
            ReelStripsStruct reelstrips_configuration = new ReelStripsStruct(display_zones_per_reel);
            SetReelsAndSlotsPerReel(reelstrips_configuration);
            return Task.CompletedTask;
        }

        /// <summary>
        /// Anytime this is called - the end_configuration, paylines managers need to update.
        /// </summary>
        /// <param name="slots_per_reelstrip"></param>
        internal void SetReelsAndSlotsPerReel(ReelStripsStruct reelstrips_configuration)
        {
            SetReelObjectsToLength(reelstrips_configuration.reelstrips.Length, ref connectedConfigurationObject.reelStripManagers);
            //Ensure reels have slots
            for (int i = 0; i < reelstrips_configuration.reelstrips.Length; i++)
            {
                connectedConfigurationObject.reelStripManagers[i].SetReelConfigurationTo(reelstrips_configuration.reelstrips[i]);
            }
            //For Each Local position thats an active display slot generate a backplate prefab for grid effect for now
            GenerateBackplateFromConfiguration(reelstrips_configuration);
            //Update Payline Manager
            connectedConfigurationObject.slotMachineManagers.paylines_manager.GenerateDynamicPaylinesFromMatrix();
        }
        private void GenerateBackplateFromConfiguration(ReelStripsStruct reelstrips_configuration)
        {
            for (int reel = 0; reel < reelstrips_configuration.reelstrips.Length; reel++)
            {
                //reelstrips_configuration.reelstrips[reel];
            }
        }

        /// <summary>
        /// Generate or remove reelstrip objects based on number of reels set
        /// </summary>
        /// <param name="reels">Reels in Configuration</param>
        internal void SetReelsTo(int reels)
        {
            SetReelObjectsToLength(reels, ref connectedConfigurationObject.reelStripManagers);
        }

        /// <summary>
        /// Generate or remove reelstrip objects based on number of reels set
        /// </summary>
        /// <param name="lengthOfReels">Reels in Configuration</param>
        /// <param name="reelStripManagersReference">reference var to cached reelstrip_managers</param>
        internal void SetReelObjectsToLength(int lengthOfReels, ref ReelStripManager[] reelStripManagersReference)
        {
            //See whether we need to make more or subtract some 
            bool add_subtract_reels = reelStripManagersReference.Length < lengthOfReels ? true : false;
            //First we are going to ensure the amount of reels are the correct amount - then we are going to initialize the amount of slots per reel

            //If current reels generated are > or < matrix.length then need to adjust accordingly
            //Ensure enough reels are on the board then ensure all reels have slots
            for (int reel = add_subtract_reels ? reelStripManagersReference.Length : reelStripManagersReference.Length - 1;
                add_subtract_reels ? reel < lengthOfReels : reel >= lengthOfReels;
                reel = add_subtract_reels ? reel + 1 : reel - 1)
            {
                if (add_subtract_reels)
                {
                    reelStripManagersReference = reelStripManagersReference.AddAt<ReelStripManager>(reel, GenerateReel(reel));
                }
                else
                {
                    if (reelStripManagersReference[reel] != null)
                        DestroyImmediate(reelStripManagersReference[reel].gameObject);
                    reelStripManagersReference = reelStripManagersReference.RemoveAt(reel);
                }
            }
            for (int reel = 0; reel < reelStripManagersReference.Length; reel++)
            {
                if (reelStripManagersReference[reel] == null)
                {
                    reelStripManagersReference[reel] = GenerateReel(reel);
                }
            }
        }

        ReelStripManager GenerateReel(int reel_number)
        {
            Type[] gameobject_components = new Type[1];
            gameobject_components[0] = typeof(ReelStripManager);
            ReelStripManager output_reelstrip_manager = StaticUtilities.CreateGameobject<ReelStripManager>(gameobject_components, "Reel_" + reel_number, transform);
            return output_reelstrip_manager;
        }

        /// <summary>
        /// Generates a new matrix object child with reelstrips configured
        /// </summary>
        /// <returns>matrix reference for connected matrix</returns>
        private void GenerateConfigurationObject(ref ReelStripConfigurationObject connectedConfigurationObject)
        {
            if (connectedConfigurationObject == null)
            {
                Type[] MatrixComponents = new Type[1];
                MatrixComponents[0] = typeof(ReelStripConfigurationObject);
                GameObject gameObject_to_return = new GameObject("ConfigurationObject", MatrixComponents);
                gameObject_to_return.transform.tag = "Matrix";
                gameObject_to_return.transform.parent = transform;
                connectedConfigurationObject = gameObject_to_return.GetComponent<ReelStripConfigurationObject>();
            }
        }

        //**************************

        internal void ConnectMatrixToChild()
        {
            //Connect Matrix Child
            connectedConfigurationObject = GetComponentInChildren<ReelStripConfigurationObject>();
        }

        internal void UpdateSpinParameters()
        {
            Debug.LogException(new Exception("Not yet Implemented - apply all spin parameter on each reel"));
            //connected_matrix.SetSpinParametersTo(spin_parameters);
        }

        internal void LoadConfigurationSelected()
        {
            configurationObjectLoadedName = configurationGeneratorSettings.configurationName;
            connectedConfigurationObject.LoadConfiguration(configurationGeneratorSettings);
            //Ensure All Objects match Configuration
            CreateCurrentConfiguration();
        }
        //******************
    }
}